#Использовать fs
#Использовать v8runner

Процедура СформироватьСписокФайловЗагрузки(Знач ТекущаяКонфигурация, Знач ПрошлаяКонфигурация, Знач ВыходнойФайлРазличий) Экспорт
	
	КодВозврата = СравнитьКонфигурации(ТекущаяКонфигурация, ПрошлаяКонфигурация, ВыходнойФайлРазличий);
	
	//Сообщить(КодВозврата);
	Если НЕ КодВозврата = 0 Тогда
		ВызватьИсключение "Не удалось получить файл различий при сравнении двух конфигураций 
							|NEW: " + ТекущаяКонфигурация + " && 
							|OLD: " + ПрошлаяКонфигурация;
	КонецЕсли;

	ФорматироватьФайлЗагрузки(ВыходнойФайлРазличий, ТекущаяКонфигурация);

	Сообщить("Файл загрузки """ + ВыходнойФайлРазличий + """ успешно сформирован.");

КонецПроцедуры

Функция СравнитьКонфигурации(Знач ТекущаяКонфигурация, Знач ПрошлаяКонфигурация, Знач ВыходнойФайлРазличий) Экспорт
	
	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.Создать();
	
	СтрокаЗапуска = "powershell ""& src\\Скрипты\\GetFileListDiff.ps1 -CurrConfigFilesPath ""%%CurrConfigFilesPath%%"" -PrevConfigFilesPath ""%%PrevConfigFilesPath%%"" -FileDiffPath ""%%FileDiffPath%%"" """;

	СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "%%CurrConfigFilesPath%%", ТекущаяКонфигурация);
	СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "%%PrevConfigFilesPath%%", ПрошлаяКонфигурация);
	СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "%%FileDiffPath%%", ВыходнойФайлРазличий);

	КомандныйФайл.ДобавитьКоманду("@echo off");	
	КомандныйФайл.ДобавитьКоманду(СтрокаЗапуска);	
	
	Сообщить(КомандныйФайл.ПолучитьТекстФайла());
	
	КодВозврата = КомандныйФайл.Исполнить();
	
	Вывод = КомандныйФайл.ПолучитьВывод();

	Возврат КодВозврата;

КонецФункции

Процедура ФорматироватьФайлЗагрузки(Знач ФайлЗагрузки, ПутьДоТекущейКонфигурации="") Экспорт
	
	Если ФайлЗагрузки = Неопределено Тогда
		ВызватьИсключение "Не передан файл загрузки для форматирования!";
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлЗагрузки, "UTF-8", Символы.ПС);
	ТекстовыйДокументТекст = ТекстовыйДокумент.ПолучитьТекст();

	ТекстовыйДокументТекст = СтрЗаменить(ТекстовыйДокументТекст, "\Ext\Form.xml", ".xml");
	ТекстовыйДокументТекст = СтрЗаменить(ТекстовыйДокументТекст, "\\", "\");

	МассивСтрокФайлов = СтрРазделить(ТекстовыйДокументТекст, Символы.ПС, Ложь);

	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Файл");

	Для Каждого ЭлементМассива Из МассивСтрокФайлов Цикл
		
		Если ЗначениеЗаполнено(ПутьДоТекущейКонфигурации) Тогда
			ЭлементМассива = СокрЛП(СтрЗаменить(ЭлементМассива, СтрЗаменить(ПутьДоТекущейКонфигурации, "\\", "\") + "\", ""));
		КонецЕсли;

		ТЗ.Добавить().Файл = ЭлементМассива;
	
	КонецЦикла; 
	
	//ТЗ.ЗагрузитьКолонку(МассивСтрокФайлов, "Файл");
	ТЗ.Сортировать("Файл Возр");		
	ТЗ.Свернуть("Файл");

	УникальныйМассив = ТЗ.ВыгрузитьКолонку("Файл");

	СтрокаУникальныхЗначений = СтрСоединить(УникальныйМассив, Символы.ПС);

	ТекстовыйДокумент.УстановитьТекст(СтрокаУникальныхЗначений);
	ТекстовыйДокумент.Записать(ФайлЗагрузки, "UTF-8", Символы.ПС);

КонецПроцедуры

Процедура СформироватьКаталогИнкрементальнойЗагрузки(Знач ФайлЗагрузки, Знач КаталогПолнойЗагрузкиКонфигурации, Знач КаталогИнкрементнойЗагрузкиКонфигурации) Экспорт
	
	Если ФС.КаталогСуществует(КаталогПолнойЗагрузкиКонфигурации) Тогда
		ФС.КопироватьСодержимоеКаталога(КаталогПолнойЗагрузкиКонфигурации + "\\Ext", КаталогИнкрементнойЗагрузкиКонфигурации + "\\Ext");
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлЗагрузки, "UTF-8", Символы.ПС);
	ТекстовыйДокументТекст = ТекстовыйДокумент.ПолучитьТекст();

	МассивПутейФайлов = СтрРазделить(ТекстовыйДокументТекст, Символы.ПС, Ложь);

	Для каждого ФайлПуть Из МассивПутейФайлов Цикл
		
		ФайлПуть = СтрЗаменить(КаталогПолнойЗагрузкиКонфигурации + "\" + ФайлПуть, "\", "/");
		КаталогПолнойЗагрузкиКонфигурации = СтрЗаменить(КаталогПолнойЗагрузкиКонфигурации, "\", "/");
		КаталогИнкрементнойЗагрузкиКонфигурации = СтрЗаменить(КаталогИнкрементнойЗагрузкиКонфигурации, "\", "/");
		
		ФайлИнкЗагрузки = Новый Файл(СтрЗаменить(ФайлПуть, КаталогПолнойЗагрузкиКонфигурации, КаталогИнкрементнойЗагрузкиКонфигурации));
		
		ФС.ОбеспечитьКаталог(ФайлИнкЗагрузки.Путь);

		КопироватьФайл(ФайлПуть, ФайлИнкЗагрузки.ПолноеИмя);	
	
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыИнкрементальнойЗагрузки()
	Возврат Новый Структура("АдресСервера, ИмяБазы, Пользователь, Пароль, КаталогИнкрементальнойЗагрузки, ФайлИнкрементальнойЗагрузки");
КонецФункции

Функция ВыполнитьИнкрементальнуюЗагрузкуКонфигурации(ПараметрыИнкрементальнойЗагрузки) Экспорт
	
	АдресСервера = ПараметрыИнкрементальнойЗагрузки.АдресСервера; 
	ИмяБазы = ПараметрыИнкрементальнойЗагрузки.ИмяБазы; 
	Пользователь = ПараметрыИнкрементальнойЗагрузки.Пользователь; 
	Пароль = ПараметрыИнкрементальнойЗагрузки.Пароль; 
	КаталогИнкрементнойЗагрузки = ПараметрыИнкрементальнойЗагрузки.КаталогИнкрементнойЗагрузки; 
	ФайлИкрементальнойЗагрузки = ПараметрыИнкрементальнойЗагрузки.ФайлИкрементальнойЗагрузки;

	Конфигуратор = Новый УправлениеКонфигуратором();
	СтрокаПодключения = ПолучитьСтрокуПодключения(АдресСервера, ИмяБазы);
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Конфигуратор.ЗагрузитьКонфигурациюИзФайлов(КаталогИнкрементнойЗагрузки, ФайлИкрементальнойЗагрузки,, ЛОЖЬ);

КонецФункции

Функция ПолучитьСтрокуПодключения(АдресСервера, ИмяБазы, Пользователь, Пароль)
	
	ШаблонСтроки = "/IBConnectionString""Srvr='{{АдресСервера}}'; Ref='{{ИмяБазы}}'""";
	
	СтрокаПодключения = СтрЗаменить(ШаблонСтроки, "{{АдресСервера}}", АдресСервера);
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "{{ИмяБазы}}", ИмяБазы);

	Возврат СтрокаПодключения;

КонецФункции



